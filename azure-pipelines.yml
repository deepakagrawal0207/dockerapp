# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
variables:
  acrname: acr05012024
  imagetag: $(Build.BuildId)

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build Docker Image
      inputs:
        containerRegistry: 'ADO-ACR-050124'
        repository: 'docker-app-image'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(imagetag)
          latest
    - task: Docker@2
      displayName: push Docker Image to ACR
      inputs:
        containerRegistry: 'ADO-ACR-050124'
        repository: 'docker-app-image'
        command: 'push'
        tags: |
          $(imagetag)
          latest
    - task: CopyFiles@2
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)/docker-app
        Contents: |
          app.yaml
          service.yaml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/menifest'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/menifest'
        artifact: 'k8s-atrifacts'
        publishLocation: 'pipeline'
- stage: Deploy
  jobs:
  - job: Deploy
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'k8s-atrifacts'
          targetPath: '$(Pipeline.Workspace)'
      - task: replacetokens@5
        inputs:
          rootDirectory: '$(Pipeline.Workspace)'
          targetFiles: '**/*.yaml'
          encoding: 'auto'
          tokenPattern: 'default'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true
      - task: KubernetesManifest@1
        displayName: deploy deployment menifest file
        inputs:
          action: 'deploy'
          connectionType: 'kubernetesServiceConnection'
          kubernetesServiceConnection: 'ADO-AKS-Connect'
          manifests: '$(Pipeline.Workspace)/app.yaml'
          containers: '$(acrname).azurecr.io/docker-app-image:$(imagetag)'
      - task: KubernetesManifest@1
        displayName: deploy service menifest file
        inputs:
          action: 'deploy'
          connectionType: 'kubernetesServiceConnection'
          kubernetesServiceConnection: 'ADO-AKS-Connect'
          manifests: '$(Pipeline.Workspace)/service.yaml'
          containers: '$(acrname).azurecr.io/docker-app-image:$(imagetag)'
